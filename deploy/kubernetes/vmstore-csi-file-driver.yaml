# vmstore CSI Driver (1.0.0)
#
# This driver version works with Kubernetes version >=1.14
#
# In production, each CSI driver deployment has to be customized to avoid conflicts,
# use non-default namespace and different names for non-namespaced entities like the ClusterRole
#
# Install to Kubernetes:
# $ kubectl apply -f deploy/kubernetes/vmstore-csi-file-driver.yaml
#


# ----------------------
# vmstore CSI Driver
# ----------------------

apiVersion: storage.k8s.io/v1 #k8s =>1.14
kind: CSIDriver
metadata:
  name: vmstore.csi.tintri.com
spec:
  attachRequired: false
  podInfoOnMount: false
---


# ---------------------------------
# vmstore CSI Controller Server
# ---------------------------------
#
# Runs single driver controller server (driver + provisioner + attacher + snapshotter) on one of the nodes
#

apiVersion: v1
kind: ServiceAccount
metadata:
  name: vmstore-csi-controller-service-account
  namespace: default # replace with non-default namespace name if needed
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vmstore-csi-controller-cluster-role
rules:
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['get', 'list', "watch"]
  - apiGroups: ['']
    resources: ['persistentvolumes']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'delete'] # "update" for attacher
  - apiGroups: ['']
    resources: ['persistentvolumeclaims']
    verbs: ['get', 'list', 'watch', 'update']
  - apiGroups: ['storage.k8s.io']
    resources: ['storageclasses']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['']
    resources: ['events']
    verbs: ['list', 'watch', 'create', 'update', 'patch']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshots']
    verbs: ['get', 'list']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotcontents']
    verbs: ['get', 'list']
  # attacher specific
  - apiGroups: ['']
    resources: ['nodes', 'pods']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['csi.storage.k8s.io']
    resources: ['csinodeinfos']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['storage.k8s.io']
    resources: ['volumeattachments']
    verbs: ['get', 'list', 'watch', 'update']
  # snapshotter specific
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotclasses']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotcontents']
    verbs: ['create', 'get', 'list', 'watch', 'update', 'delete', 'patch']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshots']
    verbs: ['get', 'list', 'watch', 'update']
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ['apiextensions.k8s.io']
    resources: ['customresourcedefinitions']
    verbs: ['create', 'list', 'watch', 'delete']
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  # CSINode specific
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["watch", "list", "get"]
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vmstore-csi-controller-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: vmstore-csi-controller-service-account
    namespace: default # replace with non-default namespace name if needed
roleRef:
  kind: ClusterRole
  name: vmstore-csi-controller-cluster-role
  apiGroup: rbac.authorization.k8s.io
---

# External Resizer
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-resizer-role
rules:
  # The following rule should be uncommented for plugins that require secrets
  # for provisioning.
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-resizer-binding
subjects:
  - kind: ServiceAccount
    name: vmstore-csi-controller-service-account
    namespace: default
roleRef:
  kind: ClusterRole
  name: csi-resizer-role
  apiGroup: rbac.authorization.k8s.io

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: external-resizer-cfg
rules:
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "watch", "list", "delete", "update", "create"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-resizer-role-cfg
  namespace: default
subjects:
  - kind: ServiceAccount
    name: vmstore-csi-controller-service-account
    namespace: default
roleRef:
  kind: Role
  name: external-resizer-cfg
  apiGroup: rbac.authorization.k8s.io
---

kind: Service
apiVersion: v1
metadata:
  name: vmstore-csi-controller-service
  labels:
    app: vmstore-csi-controller
spec:
  selector:
    app: vmstore-csi-controller
  ports:
    - name: dummy
      port: 12345
---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: vmstore-csi-controller
spec:
  # serviceName: vmstore-csi-controller-service
  replicas: 1
  selector:
    matchLabels:
      app: vmstore-csi-controller # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: vmstore-csi-controller
    spec:
      serviceAccount: vmstore-csi-controller-service-account
      containers:
        # csi-provisioner: sidecar container that watches Kubernetes PersistentVolumeClaim objects
        # and triggers CreateVolume/DeleteVolume against a CSI endpoint
        - name: csi-provisioner
          image: registry.k8s.io/sig-storage/csi-provisioner:v3.0.0
          imagePullPolicy: IfNotPresent
          args:
            - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
            - --volume-name-prefix=pvc-vmstore
            - --strict-topology
            - --immediate-topology=false
            - --feature-gates=Topology=true
            - --timeout=300s
            - --retry-interval-start=10s
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy
        - name: csi-snapshotter
          image: registry.k8s.io/sig-storage/csi-snapshotter:v5.0.1
          imagePullPolicy: IfNotPresent
          args:
            - -v=3
            - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy
        - name: csi-resizer
          image: k8s.gcr.io/sig-storage/csi-resizer:v1.12.0
          args:
            - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: driver
          securityContext:
            privileged: true
            capabilities:
              add: ['SYS_ADMIN']
            allowPrivilegeEscalation: true
          image: tintri/vmstore-csi-driver:master
          imagePullPolicy: Always
          args:
            - --nodeid=$(KUBE_NODE_NAME)
            - --endpoint=unix://csi/csi.sock
            - --role=controller
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: secret
              mountPath: /config
              readOnly: true
      volumes:
        - name: socket-dir
          emptyDir:
        - name: secret
          secret:
            secretName: vmstore-csi-file-driver-config

---


# ---------------------------
# vmstore CSI Node Server
# ---------------------------
#
# Runs driver node server (driver + registrar) on each node
#

apiVersion: v1
kind: ServiceAccount
metadata:
  name: vmstore-csi-node-service-account
  namespace: default # replace with non-default namespace name if needed
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vmstore-csi-node-cluster-role
rules:
  - apiGroups: ['']
    resources: ['events']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch']
  - apiGroups: ['']
    resources: ['nodes']
    verbs: ['get']
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vmstore-csi-node-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: vmstore-csi-node-service-account
    namespace: default # replace with non-default namespace name if needed
roleRef:
  kind: ClusterRole
  name: vmstore-csi-node-cluster-role
  apiGroup: rbac.authorization.k8s.io
---

# vmstore Node Server as a daemon

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: vmstore-csi-node
spec:
  selector:
    matchLabels:
      app: vmstore-csi-node
  template:
    metadata:
      labels:
        app: vmstore-csi-node
    spec:
      serviceAccount: vmstore-csi-node-service-account
      hostNetwork: true
      containers:
        - name: driver-registrar
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.5.1
          imagePullPolicy: IfNotPresent
          args:
            - --v=3
            - --csi-address=/csi/csi.sock
            - --kubelet-registration-path=/var/lib/kubelet/plugins/vmstore.csi.tintri.com/csi.sock
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
        - name: driver
          securityContext:
            privileged: true
            capabilities:
              add: ['SYS_ADMIN']
            allowPrivilegeEscalation: true
          image: tintri/vmstore-csi-driver:master
          imagePullPolicy: Always
          args:
            - --nodeid=$(KUBE_NODE_NAME)
            - --endpoint=unix://csi/csi.sock
            - --role=node
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: dev
              mountPath: /dev
            - name: socket-dir
              mountPath: /csi
            - name: secret
              mountPath: /config
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
      volumes:
        - name: dev
          hostPath:
            path: /dev
            type: Directory
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/vmstore.csi.tintri.com
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: secret
          secret:
            secretName: vmstore-csi-file-driver-config
---
